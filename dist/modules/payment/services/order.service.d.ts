import { PerformerService } from 'src/modules/performer/services';
import { ProductService, VideoService } from 'src/modules/performer-assets/services';
import { UserDto } from 'src/modules/user/dtos';
import { Model } from 'mongoose';
import { ObjectId } from 'mongodb';
import { UserService } from 'src/modules/user/services';
import { MailerService } from 'src/modules/mailer';
import { CouponService } from 'src/modules/coupon/services';
import { OrderDetailsModel, OrderModel } from '../models';
import { OrderSearchPayload, OrderUpdatePayload, PurchaseProductsPayload, PurchaseVideoPayload, SubscribePerformerPayload } from '../payloads';
import { OrderDto } from '../dtos';
export declare class OrderService {
    private readonly performerService;
    private readonly productService;
    private readonly videoService;
    private readonly couponService;
    private readonly userService;
    private readonly orderModel;
    private readonly orderDetailModel;
    private readonly mailService;
    constructor(performerService: PerformerService, productService: ProductService, videoService: VideoService, couponService: CouponService, userService: UserService, orderModel: Model<OrderModel>, orderDetailModel: Model<OrderDetailsModel>, mailService: MailerService);
    findById(id: string | ObjectId): Promise<OrderModel>;
    findByIds(ids: string[] | ObjectId[]): Promise<OrderModel[]>;
    findByQuery(payload: any): Promise<OrderModel[]>;
    findDetailsByQuery(payload: any): Promise<OrderDetailsModel[]>;
    search(req: OrderSearchPayload): Promise<{
        data: OrderDto[];
        total: number;
    }>;
    orderDetailsSearch(req: OrderSearchPayload): Promise<{
        data: {
            _id: ObjectId;
            orderId: ObjectId;
            orderNumber: string;
            buyerId: ObjectId;
            buyerSource: string;
            sellerId: ObjectId;
            sellerSource: string;
            productType: string;
            productId: ObjectId;
            name: string;
            description: string;
            unitPrice: number;
            originalPrice: number;
            status: string;
            payBy: string;
            quantity: number;
            totalPrice: number;
            deliveryStatus: string;
            deliveryAddress: string;
            paymentStatus: string;
            postalCode: string;
            phoneNumber: string;
            paymentGateway: string;
            couponInfo: any;
            seller: any;
            buyer: any;
            createdAt: Date;
            updatedAt: Date;
        }[];
        total: number;
    }>;
    getOrderDetails(id: string | ObjectId): Promise<{
        _id: ObjectId;
        orderId: ObjectId;
        orderNumber: string;
        buyerId: ObjectId;
        buyerSource: string;
        sellerId: ObjectId;
        sellerSource: string;
        productType: string;
        productId: ObjectId;
        name: string;
        description: string;
        unitPrice: number;
        originalPrice: number;
        status: string;
        payBy: string;
        quantity: number;
        totalPrice: number;
        deliveryStatus: string;
        deliveryAddress: string;
        paymentStatus: string;
        postalCode: string;
        phoneNumber: string;
        paymentGateway: string;
        couponInfo: any;
        seller: any;
        buyer: any;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateDetails(id: string, payload: OrderUpdatePayload, currentUser: UserDto): Promise<void>;
    generateOrderNumber(): string;
    getDetails(orderId: string | ObjectId): Promise<any>;
    createFromPerformerProducts(payload: PurchaseProductsPayload, user: UserDto, buyerSource?: string, orderStatus?: string): Promise<OrderModel>;
    createFromPerformerVOD(payload: PurchaseVideoPayload, user: UserDto, buyerSource?: string, orderStatus?: string): Promise<OrderModel>;
    createForPerformerSubscription(payload: SubscribePerformerPayload, user: UserDto, buyerSource?: string, orderStatus?: string): Promise<OrderModel>;
    createForPerformerSubscriptionRenewal({ userId, performerId, type, price, paymentGateway }: {
        userId: any;
        performerId: any;
        type: any;
        price: any;
        paymentGateway?: string;
    }, buyerSource?: string, orderStatus?: string): Promise<OrderModel>;
}
